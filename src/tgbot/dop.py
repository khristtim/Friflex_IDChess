import telebot
from telebot import types
import os
import json

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
token = os.getenv("API_TOKEN")

if not token:
    print("Error: API_TOKEN environment variable not set.")
    exit()

bot = telebot.TeleBot(token)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_styles = {}
user_interface_languages = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
user_processing_languages = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
# user_changing_interface_lang = {} # –≠—Ç–æ—Ç —Ñ–ª–∞–≥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_state
user_state = {} # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_previous_state = {} # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ü–†–ï–î–´–î–£–©–ï–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
VIDEO_DIR = "user_videos"
JSON_DIR = "user_json" # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è JSON

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if not os.path.exists(VIDEO_DIR):
    os.makedirs(VIDEO_DIR)
if not os.path.exists(JSON_DIR):
    os.makedirs(JSON_DIR)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
STATE_AWAITING_INTERFACE_LANG = 'awaiting_interface_lang'
STATE_AWAITING_STYLE = 'awaiting_style'
STATE_AWAITING_PROCESSING_LANG = 'awaiting_processing_lang'
STATE_AWAITING_VIDEO = 'awaiting_video'
STATE_AWAITING_JSON = 'awaiting_json'
STATE_PROCESSING = 'processing'
STATE_IDLE = 'idle' # –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

# --- –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö ---
texts = {
    'en': {
        'welcome': "Welcome!\n\n"
                    "‚ùî What the bot does:\n\n"
                       "üîä Adds professional voice acting and subtitles in 5 languages üåç (Russian, English, Chinese, Spanish, Hindi)\n"
                       "üíª Retains all original elements (players, chessboard, and music)\n"
                       "üéµ Highlights the key moments of the party with perfect synchronization\n"
                       "üé• Converts them into vertical videos optimized for YouTube Shorts üì±\n\n"
                       "üéØ Result:\n"
                       "Dynamic, informative and stylishly designed videos, ready for publication!\n\n"
                       "üéÆ How it works:\n\n"
                       "üó£Ô∏è Select the interface language\n"
                       "üé® Define the processing style:\n"
                       "Educational (detailed analysis with an emphasis on tactics) or Entertaining (memes, effects and humorous accompaniment)\n"
                       "üîä Specify the language for subtitles and voiceover\n"
                       "üì§ Download the original video\n\n"
                       "1‚É£ To start, select the interface language:",
        'start_button': "üü¢ Getting started with the bot",
        'select_interface_language': "Please select your preferred interface language:",
        'interface_language_selected': "Interface language set to: {language}",
        'style_selection': "Great! Now choose the processing style:",
        'educational_style': "üìò Educational style (Deep analysis)",
        'funny_style': "üé≠ Entertaining style (Memes and humor)",
        'style_selected': "The learning style is selected. Great!",
        'funny_style_selected': "An entertaining style has been chosen. We are preparing memes!",
        'select_processing_language': "Now choose the language for subtitles and voiceover:",
        'processing_language_selected': "The processing language is set to {language}.",
        'upload_video_prompt': "Perfect! Now upload your chess game video file:",
        'upload_video_button': "‚¨ÜÔ∏è Upload video file", # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Ç–µ–∫—Å—Ç–∞—Ö, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        'video_received': "üé• Video received. Now please upload the JSON file with the game data.",
        'upload_json_prompt': "Please upload the JSON file with the game data.",
        'upload_json_button': "üìÑ Upload JSON file",
        'json_received': "üìÑ JSON file received. Starting processing...",
        'follow_instructions': "Please follow the instructions. Send the requested file type.",
        'select_action': "Select an action:",
        'invalid_input': "Please use the buttons or commands to interact.",
        'bot_description': "I will add voice acting and subtitles in your chosen language!",
        'processing_started': "Your video and JSON data are being processed. This may take some time...",
        'invalid_file_type': "Invalid file type. Please upload a {expected_type} file.",
        'json_error': "Error reading the JSON file. Please ensure it's a valid JSON.",
         'video_note_not_allowed': "Video notes are not supported. Please upload a regular video file.",
        # --- –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
        'command_instruction_desc': "Show bot instructions",
        'command_change_interface_lang_desc': "Change interface language",
        'command_change_processing_lang_desc': "Change subtitle/voiceover language",
        'command_change_style_desc': "Change processing style",
        'description': "‚ùî What the bot does:\n\n"
                       "üîä Adds professional voice acting and subtitles in 5 languages üåç (Russian, English, Chinese, Spanish, Hindi)\n"
                       "üíª Retains all original elements (players, chessboard, and music)\n"
                       "üéµ Highlights the key moments of the party with perfect synchronization\n"
                       "üé• Converts them into vertical videos optimized for YouTube Shorts üì±\n\n"
                       "üéØ Result:\n"
                       "Dynamic, informative and stylishly designed videos, ready for publication!\n\n"
                       "üéÆ How it works:\n\n"
                       "üó£Ô∏è Select the interface language\n"
                       "üé® Define the processing style:\n"
                       "Educational (detailed analysis with an emphasis on tactics) or Entertaining (memes, effects and humorous accompaniment)\n"
                       "üîä Specify the language for subtitles and voiceover\n"
                       "üì§ Download the original video\n\n"
    },
    'ru': {
        'welcome': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                    "‚ùî –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:\n\n"
                       "üîä –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∑–≤—É—á–∫—É –∏ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ 5 —è–∑—ã–∫–∞—Ö üåç (—Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, —Ö–∏–Ω–¥–∏)\n"
                       "üíª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∏–≥—Ä–æ–∫–æ–≤, —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É –∏ –º—É–∑—ã–∫—É)\n"
                       "üéµ –≤—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–∞—Ä—Ç–∏–∏ —Å –∏–¥–µ–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π\n"
                       "üé• –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è YouTube Shorts üì±\n\n"
                       "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                       "–¥–∏–Ω–∞–º–∏—á–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ —Å—Ç–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
                       "üéÆ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
                       "üó£Ô∏è –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                       "üé® –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
                       "–æ–±—É—á–∞—é—â–∏–π (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –Ω–∞ —Ç–∞–∫—Ç–∏–∫–µ) –∏–ª–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π (–º–µ–º—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ)\n"
                       "üîä —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –æ–∑–≤—É—á–∫–∏\n"
                       "üì§ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ\n\n"
                       "1‚É£ –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        'start_button': "üü¢ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
        'select_interface_language': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        'interface_language_selected': "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {language}.",
        'style_selection': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        'educational_style': "üìò –û–±—É—á–∞—é—â–∏–π —Å—Ç–∏–ª—å (–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑)",
        'funny_style': "üé≠ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å (–ú–µ–º—ã –∏ —é–º–æ—Ä)",
        'style_selected': "–í—ã–±—Ä–∞–Ω –æ–±—É—á–∞—é—â–∏–π —Å—Ç–∏–ª—å. –û—Ç–ª–∏—á–Ω–æ!",
        'funny_style_selected': "–í—ã–±—Ä–∞–Ω —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. –ì–æ—Ç–æ–≤–∏–º –º–µ–º—ã!",
        'select_processing_language': "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –æ–∑–≤—É—á–∫–∏:",
        'processing_language_selected': "–Ø–∑—ã–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {language}.",
        'upload_video_prompt': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª —à–∞—Ö–º–∞—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏:",
        'upload_video_button': "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª", # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Ç–µ–∫—Å—Ç–∞—Ö, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        'video_received': "üé• –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Ç–∏–∏.",
        'upload_json_prompt': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Ç–∏–∏.",
        'upload_json_button': "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Ñ–∞–π–ª",
        'json_received': "üìÑ JSON —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
        'follow_instructions': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.",
        'select_action': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'invalid_input': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        'bot_description': "–Ø –¥–æ–±–∞–≤–ª—é –æ–∑–≤—É—á–∫—É –∏ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —è–∑—ã–∫–µ!",
        'processing_started': "–í–∞—à–µ –≤–∏–¥–µ–æ –∏ –¥–∞–Ω–Ω—ã–µ JSON –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
        'invalid_file_type': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ç–∏–ø–∞ {expected_type}.",
        'json_error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON.",
        'video_note_not_allowed': "–ö—Ä—É–∂–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—ã—á–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª.",
        # --- –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
        'command_instruction_desc': "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –±–æ—Ç–∞",
        'command_change_interface_lang_desc': "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
        'command_change_processing_lang_desc': "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤/–æ–∑–≤—É—á–∫–∏",
        'command_change_style_desc': "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        'description': "‚ùî –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:\n\n"
                       "üîä –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∑–≤—É—á–∫—É –∏ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ 5 —è–∑—ã–∫–∞—Ö üåç (—Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, —Ö–∏–Ω–¥–∏)\n"
                       "üíª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∏–≥—Ä–æ–∫–æ–≤, —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É –∏ –º—É–∑—ã–∫—É)\n"
                       "üéµ –≤—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–∞—Ä—Ç–∏–∏ —Å –∏–¥–µ–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π\n"
                       "üé• –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è YouTube Shorts üì±\n\n"
                       "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                       "–¥–∏–Ω–∞–º–∏—á–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ —Å—Ç–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
                       "üéÆ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
                       "üó£Ô∏è –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                       "üé® –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
                       "–æ–±—É—á–∞—é—â–∏–π (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –Ω–∞ —Ç–∞–∫—Ç–∏–∫–µ) –∏–ª–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π (–º–µ–º—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ)\n"
                       "üîä —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –æ–∑–≤—É—á–∫–∏\n"
                       "üì§ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ\n\n"
    },
     'es': {
        'welcome': "¬°Bienvenido!\n\n"
                    "‚ùî Lo que hace el bot:\n\n"
                       "üîä agrega la formaci√≥n profesional de los doblajes y subt√≠tulos en 5 idiomas üåç (ruso, ingl√©s, chino, espa√±ol, hindi)\n"
                       "üíª conserva todos los elementos originales (jugadores, tablero de ajedrez y la m√∫sica)\n"
                       "üéµ resalta los momentos clave del partido con una perfecta sincronizaci√≥n\n"
                       "üé• convierte en verticales de rodillos optimizado para YouTube Shorts üì±\n\n"
                       "üéØ Resultado:\n"
                       "din√°micos, informativos y elegantes, v√≠deo, listos para su publicaci√≥n!\n\n"
                       "üéÆ C√≥mo funciona:\n\n"
                       "üó£Ô∏è seleccione el idioma de la interfaz\n"
                       "üé® defina el estilo de procesamiento:\n"
                       "educativo (an√°lisis detallado con √©nfasis en t√°cticas) o entretenido (memes, efectos y acompa√±amiento humor√≠stico)\n"
                       "üîä especifique el idioma para los Subt√≠tulos y la actuaci√≥n de voz\n"
                       "üì§ descargue el video original\n\n"
                       "1‚É£ To start, select the interface language:",
        'start_button': "üü¢ Empezar a usar el bot",
        'select_interface_language': "Por favor, selecciona tu idioma de interfaz preferido:",
        'interface_language_selected': "Idioma de interfaz configurado a: {language}.",
        'style_selection': "¬°Genial! Ahora elige el estilo de procesamiento:",
        'educational_style': "üìò Estilo educativo (An√°lisis profundo)",
        'funny_style': "üé≠ Estilo entretenido (Memes y humor)",
        'style_selected': "Se ha seleccionado el estilo educativo. ¬°Excelente!",
        'funny_style_selected': "Se ha seleccionado el estilo entretenido. ¬°Estamos preparando memes!",
        'select_processing_language': "Ahora elige el idioma para los subt√≠tulos y la narraci√≥n:",
        'processing_language_selected': "El idioma de procesamiento se ha configurado a: {language}.",
        'upload_video_prompt': "¬°Perfecto! Ahora sube el archivo de video de tu partida de ajedrez:",
        'upload_video_button': "‚¨ÜÔ∏è Subir archivo de video", # –ö–Ω–æ–øka –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Ç–µ–∫—Å—Ç–∞—Ö, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        'video_received': "üé• Video recibido. Ahora, por favor, sube el archivo JSON con los datos de la partida.",
        'upload_json_prompt': "Por favor, sube el archivo JSON con los datos de la partida.",
        'upload_json_button': "üìÑ Subir archivo JSON",
        'json_received': "üìÑ Archivo JSON recibido. Iniciando procesamiento...",
        'follow_instructions': "Por favor, sigue las instrucciones. Env√≠a el tipo de archivo solicitado.",
        'select_action': "Selecciona una acci√≥n:",
        'invalid_input': "Por favor, usa los botones o comandos para interactuar.",
        'bot_description': "¬°A√±adir√© narraci√≥n y subt√≠tulos en el idioma que elijas!",
        'processing_started': "Tu video y datos JSON est√°n siendo procesados. Esto puede tomar alg√∫n tiempo...",
        'invalid_file_type': "Tipo de archivo inv√°lido. Por favor, sube un archivo tipo {expected_type}.",
        'json_error': "Error al leer el archivo JSON. Aseg√∫rate de que sea un JSON v√°lido.",
        'video_note_not_allowed': "Las notas de video no son compatibles. Por favor, sube un archivo de video regular.",
        # --- T–µ–∫—Å—Ços para comandos de men√∫ ---
        'command_instruction_desc': "Mostrar instrucciones del bot",
        'command_change_interface_lang_desc': "Cambiar idioma de interfaz",
        'command_change_processing_lang_desc': "Cambiar idioma de subt√≠tulos/narraci√≥n",
        'command_change_style_desc': "Cambiar estilo de procesamiento",
        'description': "‚ùî Lo que hace el bot:\n\n"
                       "üîä agrega la formaci√≥n profesional de los doblajes y subt√≠tulos en 5 idiomas üåç (ruso, ingl√©s, chino, espa√±ol, hindi)\n"
                       "üíª conserva todos los elementos originales (jugadores, tablero de ajedrez y la m√∫sica)\n"
                       "üéµ resalta los momentos clave del partido con una perfecta sincronizaci√≥n\n"
                       "üé• convierte en verticales de rodillos optimizado para YouTube Shorts üì±\n\n"
                       "üéØ Resultado:\n"
                       "din√°micos, informativos y elegantes, v√≠deo, listos para su publicaci√≥n!\n\n"
                       "üéÆ C√≥mo funciona:\n\n"
                       "üó£Ô∏è seleccione el idioma de la interfaz\n"
                       "üé® defina el estilo de procesamiento:\n"
                       "educativo (an√°lisis detallado con √©nfasis en t√°cticas) o entretenido (memes, efectos y acompa√±amiento humor√≠stico)\n"
                       "üîä especifique el idioma para los Subt√≠tulos y la actuaci√≥n de voz\n"
                       "üì§ descargue el video original\n\n"
    },
    'zh': {
        'welcome': "Ê¨¢ËøéÔºÅ\n\n"
                    "‚ùî Êú∫Âô®‰∫∫ÂÅö‰ªÄ‰πàÔºö\n\n"
                       "üîä Â¢ûÂä†‰∫Ü‰∏ì‰∏öÁöÑÈÖçÈü≥Âíå5ÁßçËØ≠Ë®ÄÔºà‰øÑËØ≠ÔºåËã±ËØ≠Ôºå‰∏≠ÊñáÔºåË•øÁè≠ÁâôËØ≠ÔºåÂç∞Âú∞ËØ≠ÔºâÁöÑÂ≠óÂπï\n"
                       "üíª ‰øùÁïô‰∫ÜÊâÄÊúâÂéüÂßãÂÖÉÁ¥†ÔºàÁé©ÂÆ∂ÔºåÊ£ãÁõòÂíåÈü≥‰πêÔºâ\n"
                       "üéµ Á™ÅÂá∫‰∫ÜÂÖöÁöÑÂÖ≥ÈîÆÊó∂Âàª‰∏éÂÆåÁæéÁöÑÂêåÊ≠•\n"
                       "üé• Â∞ÜÂÆÉ‰ª¨ËΩ¨Êç¢‰∏∫ÈíàÂØπYouTubeÁü≠Áâá‰ºòÂåñÁöÑÂûÇÁõ¥ËßÜÈ¢ëüì±\n\n"
                       "üéØ ÁªìÊûú:\n"
                       "Âä®ÊÄÅ, ‰ø°ÊÅØÂíåÊó∂Â∞öËÆæËÆ°ÁöÑËßÜÈ¢ë, ÂáÜÂ§áÂá∫Áâà!\n\n"
                       "üéÆ ÂÆÉÊòØÂ¶Ç‰ΩïÂ∑•‰ΩúÁöÑÔºö\n\n"
                       "üó£Ô∏è ÈÄâÊã©ÁïåÈù¢ËØ≠Ë®Ä\n"
                       "üé® ÂÆö‰πâÂ§ÑÁêÜÈ£éÊ†ºÔºö\n"
                       "ÊïôËÇ≤ÔºàËØ¶ÁªÜÂàÜÊûêÔºåÈáçÁÇπÊòØÊàòÊúØÔºâÊàñÂ®±‰πêÔºàÊ®°Âõ†ÔºåÊïàÊûúÂíåÂπΩÈªò‰º¥Â•èÔºâ\n"
                       "üîä ÊåáÂÆöÂ≠óÂπïÂíåÁîªÂ§ñÈü≥ÁöÑËØ≠Ë®Ä\n"
                       "üì§ ‰∏ãËΩΩÂéüËßÜÈ¢ë\n\n"
                       "1‚É£ÂºÄÂßãÊó∂ÔºåÈÄâÊã©ÁïåÈù¢ËØ≠Ë®Ä:",
        'start_button': "üü¢ ÂºÄÂßã‰ΩøÁî®Êú∫Âô®‰∫∫",
        'select_interface_language': "ËØ∑ÈÄâÊã©‰Ω†ÂÅèÂ•ΩÁöÑÁïåÈù¢ËØ≠Ë®ÄÔºö",
        'interface_language_selected': "ÁïåÈù¢ËØ≠Ë®ÄÂ∑≤ËÆæÁΩÆ‰∏∫Ôºö{language}„ÄÇ",
        'style_selection': "Â§™Ê£í‰∫ÜÔºÅÁé∞Âú®ÈÄâÊã©Â§ÑÁêÜÈ£éÊ†ºÔºö",
        'educational_style': "üìò ÊïôËÇ≤È£éÊ†ºÔºàÊ∑±Â∫¶ÂàÜÊûêÔºâ",
        'funny_style': "üé≠ Â®±‰πêÈ£éÊ†ºÔºàË°®ÊÉÖÂåÖÂíåÂπΩÈªòÔºâ",
        'style_selected': "Â∑≤ÈÄâÊã©ÊïôËÇ≤È£éÊ†º„ÄÇÂ§™Ê£í‰∫ÜÔºÅ",
        'funny_style_selected': "Â∑≤ÈÄâÊã©Â®±‰πêÈ£éÊ†º„ÄÇÊ≠£Âú®ÂáÜÂ§áË°®ÊÉÖÂåÖÔºÅ",
        'select_processing_language': "Áé∞Âú®ÈÄâÊã©Â≠óÂπïÂíåÈÖçÈü≥ËØ≠Ë®ÄÔºö",
        'processing_language_selected': "Â§ÑÁêÜËØ≠Ë®ÄÂ∑≤ËÆæÁΩÆ‰∏∫Ôºö{language}„ÄÇ",
        'upload_video_prompt': "ÂæàÂ•ΩÔºÅÁé∞Âú®‰∏ä‰º†‰Ω†ÁöÑÂõΩÈôÖË±°Ê£ãÂØπÂ±ÄËßÜÈ¢ëÊñá‰ª∂Ôºö",
        'upload_video_button': "‚¨ÜÔ∏è ‰∏ä‰º†ËßÜÈ¢ëÊñá‰ª∂", # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Ç–µ–∫—Å—Ç–∞—Ö, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        'video_received': "üé• ËßÜÈ¢ëÂ∑≤Êé•Êî∂„ÄÇÁé∞Âú®ËØ∑‰∏ä‰º†ÂåÖÂê´ÂØπÂ±ÄÊï∞ÊçÆÁöÑ JSON Êñá‰ª∂„ÄÇ",
        'upload_json_prompt': "ËØ∑‰∏ä‰º†ÂåÖÂê´ÂØπÂ±ÄÊï∞ÊçÆÁöÑ JSON Êñá‰ª∂„ÄÇ",
        'upload_json_button': "üìÑ ‰∏ä‰º† JSON Êñá‰ª∂",
        'json_received': "üìÑ JSON Êñá‰ª∂Â∑≤Êé•Êî∂„ÄÇÊ≠£Âú®ÂºÄÂßãÂ§ÑÁêÜ...",
        'follow_instructions': "ËØ∑ÊåâÁÖßÊåáÁ§∫Êìç‰Ωú„ÄÇÂèëÈÄÅËØ∑Ê±ÇÁöÑÊñá‰ª∂Á±ªÂûã„ÄÇ",
        'select_action': "ÈÄâÊã©‰∏Ä‰∏™Êìç‰ΩúÔºö",
        'invalid_input': "ËØ∑‰ΩøÁî®ÊåâÈíÆÊàñÂëΩ‰ª§ËøõË°å‰∫§‰∫í„ÄÇ",
        'bot_description': "ÊàëÂ∞Ü‰∏∫‰Ω†ÈÄâÊã©ÁöÑËØ≠Ë®ÄÊ∑ªÂä†ÈÖçÈü≥ÂíåÂ≠óÂπïÔºÅ",
        'processing_started': "ÊÇ®ÁöÑËßÜÈ¢ëÂíå JSON Êï∞ÊçÆÊ≠£Âú®Â§ÑÁêÜ‰∏≠„ÄÇËøôÂèØËÉΩÈúÄË¶Å‰∏Ä‰∫õÊó∂Èó¥...",
        'invalid_file_type': "Êñá‰ª∂Á±ªÂûãÊó†Êïà„ÄÇËØ∑‰∏ä‰º† {expected_type} Êñá‰ª∂„ÄÇ",
        'json_error': "ËØªÂèñ JSON Êñá‰ª∂Êó∂Âá∫Èîô„ÄÇËØ∑Á°Æ‰øùÂÆÉÊòØÊúâÊïàÁöÑ JSON„ÄÇ",
        'video_note_not_allowed': "ËßÜÈ¢ëÁ¨îËÆ∞‰∏çÂèóÊîØÊåÅ„ÄÇËØ∑‰∏ä‰º†Â∏∏ËßÑËßÜÈ¢ëÊñá‰ª∂„ÄÇ",
        # --- –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
        'command_instruction_desc': "ÊòæÁ§∫Êú∫Âô®‰∫∫ËØ¥Êòé",
        'command_change_interface_lang_desc': "Êõ¥ÊîπÁïåÈù¢ËØ≠Ë®Ä",
        'command_change_processing_lang_desc': "Êõ¥ÊîπÂ≠óÂπï/ÈÖçÈü≥ËØ≠Ë®Ä",
        'command_change_style_desc': "Êõ¥ÊîπÂ§ÑÁêÜÈ£éÊ†º",
        'description': "‚ùî Êú∫Âô®‰∫∫ÂÅö‰ªÄ‰πàÔºö\n\n"
                       "üîä Â¢ûÂä†‰∫Ü‰∏ì‰∏öÁöÑÈÖçÈü≥Âíå5ÁßçËØ≠Ë®ÄÔºà‰øÑËØ≠ÔºåËã±ËØ≠Ôºå‰∏≠ÊñáÔºåË•øÁè≠ÁâôËØ≠ÔºåÂç∞Âú∞ËØ≠ÔºâÁöÑÂ≠óÂπï\n"
                       "üíª ‰øùÁïô‰∫ÜÊâÄÊúâÂéüÂßãÂÖÉÁ¥†ÔºàÁé©ÂÆ∂ÔºåÊ£ãÁõòÂíåÈü≥‰πêÔºâ\n"
                       "üéµ Á™ÅÂá∫‰∫ÜÂÖöÁöÑÂÖ≥ÈîÆÊó∂Âàª‰∏éÂÆåÁæéÁöÑÂêåÊ≠•\n"
                       "üé• Â∞ÜÂÆÉ‰ª¨ËΩ¨Êç¢‰∏∫ÈíàÂØπYouTubeÁü≠Áâá‰ºòÂåñÁöÑÂûÇÁõ¥ËßÜÈ¢ëüì±\n\n"
                       "üéØ Result:\n"
                       "Dynamic, informative and stylishly designed videos, ready for publication!\n\n"
                       "üéÆ How it works:\n\n"
                       "üó£Ô∏è Select the interface language\n"
                       "üé® Define the processing style:\n"
                       "Educational (detailed analysis with an emphasis on tactics) or Entertaining (memes, effects and humorous accompaniment)\n"
                       "üîä Specify the language for subtitles and voiceover\n"
                       "üì§ Download the original video\n\n"
    },
    'hi': {
        'welcome': "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!\n\n"
                    "‚ùî ‡§¨‡•â‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:\n\n"
                       "üîä 5 ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç (‡§∞‡•Ç‡§∏‡•Ä, ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä, ‡§ö‡•Ä‡§®‡•Ä, ‡§∏‡•ç‡§™‡•á‡§®‡§ø‡§∂, ‡§π‡§ø‡§Ç‡§¶‡•Ä) ‡§Æ‡•á‡§Ç ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§Ü‡§µ‡§æ‡§ú ‡§Ö‡§≠‡§ø‡§®‡§Ø ‡§î‡§∞ ‡§â‡§™‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à üåç\n"
                       "üíª ‡§∏‡§≠‡•Ä ‡§Æ‡•Ç‡§≤ ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç (‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡§ø‡§Ø‡•ã‡§Ç, ‡§∂‡§§‡§∞‡§Ç‡§ú ‡§¨‡•ã‡§∞‡•ç‡§° ‡§î‡§∞ ‡§∏‡§Ç‡§ó‡•Ä‡§§) ‡§ï‡•ã ‡§¨‡§∞‡§ï‡§∞‡§æ‡§∞ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à\n"
                       "üéµ ‡§™‡§æ‡§∞‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§∏‡§ø‡§Ç‡§ï‡•ç‡§∞‡§®‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡§æ‡§à‡§≤‡§æ‡§á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à\n"
                       "üé• ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§∂‡•â‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ä‡§∞‡•ç‡§ß‡•ç‡§µ‡§æ‡§ß‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§Æ‡•á‡§Ç ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à üì±\n\n"
                       "üéØ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ:\n"
                       "‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤, ‡§∏‡•Ç‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤‡§ø‡§∂ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã, ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞!\n\n"
                       "üéÆ ‡§Ø‡§π ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:\n\n"
                       "üó£Ô∏è ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç\n"
                       "üé® ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§∂‡•à‡§≤‡•Ä ‡§ï‡•ã ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç:\n"
                       "‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï (‡§∞‡§£‡§®‡•Ä‡§§‡§ø ‡§™‡§∞ ‡§ú‡•ã‡§∞ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£) ‡§Ø‡§æ ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§ï (‡§Æ‡•á‡§Æ, ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§î‡§∞ ‡§µ‡§ø‡§®‡•ã‡§¶‡•Ä ‡§∏‡§Ç‡§ó‡§§)\n"
                       "üîä ‡§â‡§™‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§î‡§∞ ‡§µ‡•â‡§Ø—Å‡§ì‡§µ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç\n"
                       "üì§ ‡§Æ‡•Ç‡§≤ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç\n\n"
                       "1 ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        'start_button': "üü¢ ‡§¨‡•â‡§ü ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§∞‡•á‡§Ç",
        'select_interface_language': "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        'interface_language_selected': "‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§∏‡•á‡§ü ‡§π‡•à: {language}‡•§",
        'style_selection': "‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ö‡§¨ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§∂‡•à‡§≤‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:",
        'educational_style': "üìò ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§∂‡•à‡§≤‡•Ä (‡§ó‡§π‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£)",
        'funny_style': "üé≠ ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§ï ‡§∂‡•à‡§≤‡•Ä (‡§Æ‡•Ä‡§Æ‡•ç‡§∏ ‡§î‡§∞ ‡§π‡§æ‡§∏‡•ç‡§Ø)",
        'style_selected': "‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§∂‡•à‡§≤‡•Ä ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ!",
        'funny_style_selected': "‡§è‡§ï ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§ï ‡§∂‡•à‡§≤‡•Ä ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§π‡§Æ ‡§Æ‡•Ä‡§Æ‡•ç‡§∏ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç!",
        'select_processing_language': "‡§Ö‡§¨ ‡§∏‡§¨‡§ü‡§æ‡§á‡§ü‡§≤ ‡§î‡§∞ ‡§µ‡•â‡§Ø‡§∏‡§ì‡§µ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        'processing_language_selected': "‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§≠‡§æ‡§∑‡§æ ‡§∏‡•á‡§ü ‡§π‡•à: {language}‡•§",
        'upload_video_prompt': "‡§â‡§§‡•ç‡§§‡§Æ! ‡§Ö‡§¨ ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§§‡§∞‡§Ç‡§ú ‡§ñ‡•á‡§≤ ‡§ï‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç:",
        'upload_video_button': "‚¨ÜÔ∏è ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç", # –ö–Ω–æ–øka –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Ç–µ–∫—Å—Ç–∞—Ö, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        'video_received': "üé• ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        'upload_json_prompt': "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        'upload_json_button': "üìÑ JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        'json_received': "üìÑ JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...",
        'follow_instructions': "‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§¨‡§ü‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡§ø‡§§ ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§",
        'select_action': "‡§è‡§ï ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        'invalid_input': "‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ü‡§®‡•ã‡§Ç ‡§Ø‡§æ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
        'bot_description': "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ö‡•Å‡§®‡•Ä ‡§π‡•Å‡§à ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§µ‡•â‡§Ø—Å ‡§è‡§ï‡•ç‡§ü‡§ø‡§Ç‡§ó –∏ —Å—É–±—Ç–∏—Ç–ª—ã ‡§ú‡•ã‡§°‡§º‡•Ç‡§Ç‡§ó‡§æ!",
        'processing_started': "‡§Ü‡§™‡§ï‡•á ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§î‡§∞ JSON ‡§°‡•á‡§ü‡§æ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§Ø ‡§≤‡§ó ‡§∏‡§ï‡§§‡§æ ‡§π‡•à...",
        'invalid_file_type': "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ {expected_type} ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        'json_error': "JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡§¢‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡§π ‡§è‡§ï ‡§Æ‡§æ‡§®‡•ç‡§Ø JSON ‡§π‡•à‡•§",
        'video_note_not_allowed': "‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        # --- –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
        'command_instruction_desc': "‡§¨‡•â‡§ü ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å",
        'command_change_interface_lang_desc': "‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç",
        'command_change_processing_lang_desc': "‡§∏‡§¨‡§ü‡§æ‡§á‡§ü‡§≤/‡§µ‡•â‡§Ø—Å‡§ì‡§µ‡§∞ ‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç",
        'command_change_style_desc': "‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§∂‡•à‡§≤‡•Ä ‡§¨‡§¶‡§≤‡•á‡§Ç",
        'description': "‚ùî ‡§¨‡•â‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:\n\n"
                       "üîä 5 ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç (‡§∞‡•Ç‡§∏‡•Ä, ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä, ‡§ö‡•Ä‡§®‡•Ä, ‡§∏‡•ç‡§™‡•á‡§®‡§ø‡§∂, ‡§π‡§ø‡§Ç‡§¶‡•Ä) ‡§Æ‡•á‡§Ç ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§Ü‡§µ‡§æ‡§ú ‡§Ö‡§≠‡§ø‡§®‡§Ø ‡§î‡§∞ ‡§â‡§™‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à üåç\n"
                       "üíª ‡§∏‡§≠‡•Ä ‡§Æ‡•Ç‡§≤ ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç (‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡§ø‡§Ø‡•ã‡§Ç, ‡§∂‡§§‡§∞‡§Ç‡§ú ‡§¨‡•ã‡§∞‡•ç‡§° ‡§î‡§∞ ‡§∏‡§Ç‡§ó‡•Ä‡§§) ‡§ï‡•ã ‡§¨‡§∞‡§ï‡§∞‡§æ‡§∞ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à\n"
                       "üéµ ‡§™‡§æ‡§∞‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§∏‡§ø‡§Ç‡§ï‡•ç‡§∞‡§®‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡§æ‡§à‡§≤‡§æ‡§á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à\n"
                       "üé• ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§∂‡•â‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ä‡§∞‡•ç‡§ß‡•ç‡§µ‡§æ‡§ß‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§Æ‡•á‡§Ç ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à üì±\n\n"
                       "üéØ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ:\n"
                       "‡§ó‡§§‡§ø‡§∂‡•Ä‡§≤, ‡§∏‡•Ç‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤‡§ø‡§∂ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§ó‡§è ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã, ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞!\n\n"
                       "üéÆ ‡§Ø‡§π ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:\n\n"
                       "üó£Ô∏è ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç\n"
                       "üé® –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
                       "‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï (‡§∞‡§£‡§®‡•Ä ‡§∞‡§£‡§®‡•Ä‡§§‡§ø ‡§™‡§∞ ‡§ú‡•ã‡§∞ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£) –∏–ª–∏ ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§ï (‡§Æ‡•á‡§Æ, ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§î‡§∞ ‡§µ‡§ø‡§®‡•ã‡§¶‡§ø‡§§ ‡§∏‡§Ç‡§ó‡§§)\n"
                       "üîä —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –æ–∑–≤—É—á–∫–∏\n"
                       "üì§ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ\n\n"
    }
}

language_buttons = {
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": 'ru',
    "üá∫üá∏ English": 'en',
    "üá™üá∏ Espa√±ol": 'es',
    "üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä": 'hi',
    "üá®üá≥ ‰∏≠Êñá": 'zh'
}

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é ---
def get_commands_for_language(lang):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ."""
    commands = [
        telebot.types.BotCommand("/description", texts[lang]['command_instruction_desc']),
        telebot.types.BotCommand("/change_interface_lang", texts[lang]['command_change_interface_lang_desc']),
        telebot.types.BotCommand("/change_processing_lang", texts[lang]['command_change_processing_lang_desc']),
        telebot.types.BotCommand("/change_style", texts[lang]['command_change_style_desc']),
    ]
    return commands

# --- –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_interface_language_selection_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text) for text in language_buttons]
    markup.row(buttons[0], buttons[1])
    markup.row(buttons[2], buttons[3], buttons[4])
    return markup

def create_processing_language_selection_inline_keyboard():
    markup = types.InlineKeyboardMarkup()
    for text, lang_code in language_buttons.items():
        markup.add(types.InlineKeyboardButton(text, callback_data=f'set_processing_lang_{lang_code}'))
    return markup

def create_style_selection_keyboard(lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton(texts[lang]['educational_style'])
    btn2 = types.KeyboardButton(texts[lang]['funny_style'])
    markup.add(btn1, btn2)
    return markup

# –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é create_upload_video_keyboard, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

def create_upload_json_keyboard(lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton(texts[lang]['upload_json_button'])
    markup.add(btn)
    return markup

# --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
def send_welcome(chat_id):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ /start
    user_interface_languages.pop(chat_id, None)
    user_styles.pop(chat_id, None)
    user_processing_languages.pop(chat_id, None)
    user_state.pop(chat_id, None)
    user_previous_state.pop(chat_id, None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state[chat_id] = STATE_AWAITING_INTERFACE_LANG
    bot.send_message(chat_id, texts['en']['welcome'],
                    reply_markup=create_interface_language_selection_keyboard())
    bot.set_my_commands([], scope=types.BotCommandScopeChat(chat_id)) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ


def send_style_selection(chat_id):
    lang = user_interface_languages.get(chat_id, 'en')
    user_state[chat_id] = STATE_AWAITING_STYLE
    markup = create_style_selection_keyboard(lang)
    bot.send_message(chat_id, texts[lang]['style_selection'], reply_markup=markup)


def send_interface_language_selection(chat_id):
    lang = user_interface_languages.get(chat_id, 'en')
    user_state[chat_id] = STATE_AWAITING_INTERFACE_LANG
    bot.send_message(chat_id, texts[lang]['select_interface_language'], reply_markup=create_interface_language_selection_keyboard())

def send_processing_language_selection(chat_id):
    lang = user_interface_languages.get(chat_id, 'en')
    user_state[chat_id] = STATE_AWAITING_PROCESSING_LANG
    markup = create_processing_language_selection_inline_keyboard()
    bot.send_message(chat_id, texts[lang]['select_processing_language'], reply_markup=markup)

def send_upload_video_prompt(chat_id):
    lang = user_interface_languages.get(chat_id, 'en')
    user_state[chat_id] = STATE_AWAITING_VIDEO
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    bot.send_message(chat_id, texts[lang]['upload_video_prompt'], reply_markup=types.ReplyKeyboardRemove())


def send_upload_json_prompt(chat_id):
    lang = user_interface_languages.get(chat_id, 'en')
    user_state[chat_id] = STATE_AWAITING_JSON
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Ñ–∞–π–ª"
    #markup = create_upload_json_keyboard(lang) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ–∂–∏–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ñ–∞–π–ª
    bot.send_message(chat_id, texts[lang]['upload_json_prompt'], reply_markup=types.ReplyKeyboardRemove())

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
def return_to_previous_state(chat_id):
    previous_state = user_previous_state.pop(chat_id, STATE_AWAITING_STYLE) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∏–ª—é, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç
    lang = user_interface_languages.get(chat_id, 'en')

    if previous_state == STATE_AWAITING_STYLE:
        send_style_selection(chat_id)
    elif previous_state == STATE_AWAITING_PROCESSING_LANG:
        send_processing_language_selection(chat_id)
    elif previous_state == STATE_AWAITING_VIDEO:
        send_upload_video_prompt(chat_id)
    elif previous_state == STATE_AWAITING_JSON:
        send_upload_json_prompt(chat_id)
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ---
def set_user_commands(chat_id, lang_code):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    commands = get_commands_for_language(lang_code)
    bot.set_my_commands(commands, scope=types.BotCommandScopeChat(chat_id))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
@bot.message_handler(commands=['description'])
def handle_instruction_command(message):
    chat_id = message.chat.id
    lang = user_interface_languages.get(chat_id, 'en')
    bot.send_message(chat_id, texts[lang]['description'], reply_markup=types.ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç.–∫. —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

@bot.message_handler(commands=['change_interface_lang'])
def handle_change_interface_lang_command(message):
    chat_id = message.chat.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    current_state = user_state.get(chat_id)
    if current_state and current_state != STATE_AWAITING_INTERFACE_LANG:
        user_previous_state[chat_id] = current_state

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–Ω–æ–≤–æ
    send_interface_language_selection(chat_id)


@bot.message_handler(commands=['change_processing_lang'])
def handle_change_processing_lang_command(message):
    chat_id = message.chat.id
    lang = user_interface_languages.get(chat_id, 'en')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —Å—Ç–∏–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å —Å–Ω–∞—á–∞–ª–∞.
    if chat_id not in user_styles:
         bot.send_message(chat_id, texts[lang]['invalid_input']) # –ò–ª–∏ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
         send_style_selection(chat_id) # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å
         return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —è–∑—ã–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω–æ–≤–æ —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏
    user_processing_languages.pop(chat_id, None)
    send_processing_language_selection(chat_id)


@bot.message_handler(commands=['change_style'])
def handle_change_style_command(message):
    chat_id = message.chat.id
    lang = user_interface_languages.get(chat_id, 'en')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª—å –∏ —è–∑—ã–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –∑–∞–Ω–æ–≤–æ
    user_styles.pop(chat_id, None)
    user_processing_languages.pop(chat_id, None)
    send_style_selection(chat_id)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    send_welcome(message.chat.id)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda m: m.content_type == 'text')
def handle_text_messages(message):
    chat_id = message.chat.id
    user_input = message.text
    current_state = user_state.get(chat_id)
    interface_lang_code = user_interface_languages.get(chat_id, 'en') # –ë–µ—Ä–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_state == STATE_AWAITING_INTERFACE_LANG:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if user_input in language_buttons:
            selected_lang_code = language_buttons[user_input]
            user_interface_languages[chat_id] = selected_lang_code
            set_user_commands(chat_id, selected_lang_code)
            bot.send_message(chat_id, texts[selected_lang_code]['interface_language_selected'].format(language=user_input), reply_markup=types.ReplyKeyboardRemove())

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
            if chat_id in user_previous_state:
                return_to_previous_state(chat_id)
            else:
                send_style_selection(chat_id) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è, –µ—Å–ª–∏ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω –≤–ø–µ—Ä–≤—ã–µ
        else:
            bot.send_message(chat_id, texts[interface_lang_code]['invalid_input']) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
            send_interface_language_selection(chat_id) # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞

    elif current_state == STATE_AWAITING_STYLE:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        educational_text = texts[interface_lang_code]['educational_style']
        funny_text = texts[interface_lang_code]['funny_style']

        if user_input == educational_text:
            user_styles[chat_id] = "educational"
            bot.send_message(chat_id, educational_text, reply_markup=types.ReplyKeyboardRemove())
            send_processing_language_selection(chat_id) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        elif user_input == funny_text:
            user_styles[chat_id] = "funny"
            bot.send_message(chat_id, funny_text, reply_markup=types.ReplyKeyboardRemove())
            send_processing_language_selection(chat_id) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        else:
            bot.send_message(chat_id, texts[interface_lang_code]['invalid_input'])
            send_style_selection(chat_id) # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞

    elif current_state == STATE_AWAITING_VIDEO:
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        bot.send_message(chat_id, texts[interface_lang_code]['invalid_file_type'].format(expected_type='video'))
        send_upload_video_prompt(chat_id) # –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞

    #elif current_state and current_state['state'] == STATE_AWAITING_JSON: # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å, user_state —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
    elif current_state == STATE_AWAITING_JSON:
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è JSON
        bot.send_message(chat_id, texts[interface_lang_code]['invalid_file_type'].format(expected_type='JSON'))
        send_upload_json_prompt(chat_id) # –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON —Å–Ω–æ–≤–∞

    else:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        bot.send_message(chat_id, texts[interface_lang_code]['invalid_input'])


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_processing_lang_'))
def handle_processing_language_callback(call):
    chat_id = call.message.chat.id
    selected_lang_code = call.data.replace('set_processing_lang_', '')
    interface_lang_code = user_interface_languages.get(chat_id, 'en')

    if selected_lang_code in texts:
        user_processing_languages[chat_id] = selected_lang_code
        selected_lang_name = ""
        for name, code in language_buttons.items():
            if code == selected_lang_code:
                selected_lang_name = name
                break

        try:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=texts[interface_lang_code]['processing_language_selected'].format(language=selected_lang_name))
        except Exception as e:
             print(f"Error editing message: {e}")
             bot.send_message(chat_id, texts[interface_lang_code]['processing_language_selected'].format(language=selected_lang_name), reply_markup=types.ReplyKeyboardRemove())

        send_upload_video_prompt(chat_id) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
    else:
        bot.send_message(chat_id, texts[interface_lang_code]['invalid_input'])

    bot.answer_callback_query(call.id)

# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ handle_files)

@bot.message_handler(content_types=['video', 'document'])
def handle_files(message):
    chat_id = message.chat.id
    current_state = user_state.get(chat_id)
    lang = user_interface_languages.get(chat_id, 'en')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    if current_state == STATE_AWAITING_VIDEO:
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –í–ò–î–ï–û —Ñ–∞–π–ª
        if message.content_type == 'video':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ (video_note)
            if message.video_note:
                bot.send_message(chat_id, texts[lang]['video_note_not_allowed'])
                send_upload_video_prompt(chat_id)
                return

            bot.send_message(chat_id, texts[lang]['video_received'], reply_markup=types.ReplyKeyboardRemove())

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
                file_info = bot.get_file(message.video.file_id)
                downloaded_file = bot.download_file(file_info.file_path)

                file_extension = os.path.splitext(file_info.file_path)[1]
                video_filename = f"{chat_id}_{message.video.file_id}{file_extension}"
                video_filepath = os.path.join(VIDEO_DIR, video_filename)

                with open(video_filepath, 'wb') as new_file:
                    new_file.write(downloaded_file)

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è JSON, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
                user_state[chat_id] = {'state': STATE_AWAITING_JSON, 'video_path': video_filepath}
                send_upload_json_prompt(chat_id)

            except Exception as e:
                print(f"Error downloading video: {e}")
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                send_upload_video_prompt(chat_id)

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ
        else:
            bot.send_message(chat_id, texts[lang]['invalid_file_type'].format(expected_type='video'))
            send_upload_video_prompt(chat_id)

    # –û–∂–∏–¥–∞–µ–º JSON —Ñ–∞–π–ª
    #elif current_state and current_state['state'] == STATE_AWAITING_JSON: # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å, user_state —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
    elif current_state == STATE_AWAITING_JSON: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ –≤ –Ω–µ–º –µ—Å—Ç—å –∫–ª—é—á state —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º STATE_AWAITING_JSON
        if message.content_type == 'document':
            file_name = message.document.file_name

            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JSON —Ñ–∞–π–ª
            if not file_name or not file_name.lower().endswith('.json'):
                bot.send_message(chat_id, texts[lang]['invalid_file_type'].format(expected_type='JSON'))
                send_upload_json_prompt(chat_id)
                return

            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º JSON
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                '''
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
                try:
                    json_data = json.loads(downloaded_file.decode('utf-8'))
                except json.JSONDecodeError:
                    bot.send_message(chat_id, texts[lang]['json_error'])
                    send_upload_json_prompt(chat_id)
                    return
                '''
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
                json_filename = f"{chat_id}_{message.document.file_id}.json"
                json_filepath = os.path.join(JSON_DIR, json_filename)
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                os.makedirs(JSON_DIR, exist_ok=True)
                
                with open(json_filepath, 'wb') as new_file:
                    new_file.write(downloaded_file)


            except Exception as e:
                print(f"Error processing JSON: {e}")
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                send_upload_json_prompt(chat_id)

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç
        else:
            bot.send_message(chat_id, texts[lang]['invalid_file_type'].format(expected_type='JSON'))
            send_upload_json_prompt(chat_id)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
@bot.message_handler(func=lambda m: m.content_type == 'text' and 
                                  user_state.get(m.chat.id) in [STATE_AWAITING_VIDEO, STATE_AWAITING_JSON])
def handle_text_during_file_await(message):
    chat_id = message.chat.id
    lang = user_interface_languages.get(chat_id, 'en')
    current_state = user_state.get(chat_id)
    
    if current_state == STATE_AWAITING_VIDEO:
        bot.send_message(chat_id, texts[lang]['invalid_file_type'].format(expected_type='video'))
        send_upload_video_prompt(chat_id)
    elif current_state == STATE_AWAITING_JSON:
        bot.send_message(chat_id, texts[lang]['invalid_file_type'].format(expected_type='JSON'))
        send_upload_json_prompt(chat_id)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π ---
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
@bot.message_handler(func=lambda m: True, content_types=['audio', 'photo', 'sticker', 'voice', 'contact', 'location', 'venue', 'game', 'invoice', 'successful_payment', 'video_note', 'poll', 'quiz', 'animation'])
def handle_unwanted_messages(message):
    chat_id = message.chat.id
    lang = user_interface_languages.get(chat_id, 'en')
    current_state = user_state.get(chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_state == STATE_AWAITING_VIDEO:
         bot.send_message(chat_id, texts[lang]['invalid_file_type'].format(expected_type='video'))
         send_upload_video_prompt(chat_id) # –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞
    elif current_state == STATE_AWAITING_JSON:
    #elif current_state and current_state['state'] == STATE_AWAITING_JSON:
         # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_files, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–∏–º
         bot.send_message(chat_id, texts[lang]['invalid_file_type'].format(expected_type='JSON'))
         send_upload_json_prompt(chat_id) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É JSON —Å–Ω–æ–≤–∞
    else:
        # –í –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤–≤–æ–¥–µ
        bot.send_message(chat_id, texts[lang]['invalid_input'])


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
print("Bot started...")
bot.infinity_polling()